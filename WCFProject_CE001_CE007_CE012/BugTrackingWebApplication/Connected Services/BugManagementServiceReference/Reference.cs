//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BugTrackingWebApplication.BugManagementServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BugAlert", Namespace="http://schemas.datacontract.org/2004/07/BugTrackingService")]
    [System.SerializableAttribute()]
    public partial class BugAlert : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> AssignedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BugIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReportPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResolutionDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ResolvedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BugTrackingWebApplication.BugManagementServiceReference.BugAlertStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> AssignedOn {
            get {
                return this.AssignedOnField;
            }
            set {
                if ((this.AssignedOnField.Equals(value) != true)) {
                    this.AssignedOnField = value;
                    this.RaisePropertyChanged("AssignedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BugId {
            get {
                return this.BugIdField;
            }
            set {
                if ((this.BugIdField.Equals(value) != true)) {
                    this.BugIdField = value;
                    this.RaisePropertyChanged("BugId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((this.CreatedByField.Equals(value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportPath {
            get {
                return this.ReportPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportPathField, value) != true)) {
                    this.ReportPathField = value;
                    this.RaisePropertyChanged("ReportPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResolutionDescription {
            get {
                return this.ResolutionDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolutionDescriptionField, value) != true)) {
                    this.ResolutionDescriptionField = value;
                    this.RaisePropertyChanged("ResolutionDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ResolvedOn {
            get {
                return this.ResolvedOnField;
            }
            set {
                if ((this.ResolvedOnField.Equals(value) != true)) {
                    this.ResolvedOnField = value;
                    this.RaisePropertyChanged("ResolvedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BugTrackingWebApplication.BugManagementServiceReference.BugAlertStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BugAlertStatus", Namespace="http://schemas.datacontract.org/2004/07/BugTrackingService")]
    public enum BugAlertStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnderResolution = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abandoned = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Resolved = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BugAlertFilter", Namespace="http://schemas.datacontract.org/2004/07/BugTrackingService")]
    public enum BugAlertFilter : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllByTester = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllByDeveloper = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnresolvedByTester = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnresolvedByDeveloper = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BugManagementServiceReference.IBugManagementService")]
    public interface IBugManagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/DoWork", ReplyAction="http://tempuri.org/IBugManagementService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/DoWork", ReplyAction="http://tempuri.org/IBugManagementService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/AddBugAlertRecord", ReplyAction="http://tempuri.org/IBugManagementService/AddBugAlertRecordResponse")]
        string AddBugAlertRecord(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/AddBugAlertRecord", ReplyAction="http://tempuri.org/IBugManagementService/AddBugAlertRecordResponse")]
        System.Threading.Tasks.Task<string> AddBugAlertRecordAsync(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/GetBugCategories", ReplyAction="http://tempuri.org/IBugManagementService/GetBugCategoriesResponse")]
        System.Data.DataSet GetBugCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/GetBugCategories", ReplyAction="http://tempuri.org/IBugManagementService/GetBugCategoriesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBugCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/GetBugAlertRecord", ReplyAction="http://tempuri.org/IBugManagementService/GetBugAlertRecordResponse")]
        BugTrackingWebApplication.BugManagementServiceReference.BugAlert GetBugAlertRecord(int bugId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/GetBugAlertRecord", ReplyAction="http://tempuri.org/IBugManagementService/GetBugAlertRecordResponse")]
        System.Threading.Tasks.Task<BugTrackingWebApplication.BugManagementServiceReference.BugAlert> GetBugAlertRecordAsync(int bugId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/GetAllBugAlertRecords", ReplyAction="http://tempuri.org/IBugManagementService/GetAllBugAlertRecordsResponse")]
        System.Data.DataSet GetAllBugAlertRecords(BugTrackingWebApplication.BugManagementServiceReference.BugAlertFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/GetAllBugAlertRecords", ReplyAction="http://tempuri.org/IBugManagementService/GetAllBugAlertRecordsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllBugAlertRecordsAsync(BugTrackingWebApplication.BugManagementServiceReference.BugAlertFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/UpdateBugAlert", ReplyAction="http://tempuri.org/IBugManagementService/UpdateBugAlertResponse")]
        string UpdateBugAlert(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/UpdateBugAlert", ReplyAction="http://tempuri.org/IBugManagementService/UpdateBugAlertResponse")]
        System.Threading.Tasks.Task<string> UpdateBugAlertAsync(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/DeleteBugAlertRecord", ReplyAction="http://tempuri.org/IBugManagementService/DeleteBugAlertRecordResponse")]
        string DeleteBugAlertRecord(int bugAlertId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/DeleteBugAlertRecord", ReplyAction="http://tempuri.org/IBugManagementService/DeleteBugAlertRecordResponse")]
        System.Threading.Tasks.Task<string> DeleteBugAlertRecordAsync(int bugAlertId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/ClaimBugAlertResolution", ReplyAction="http://tempuri.org/IBugManagementService/ClaimBugAlertResolutionResponse")]
        string ClaimBugAlertResolution(int bugId, int developerId, int assignedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/ClaimBugAlertResolution", ReplyAction="http://tempuri.org/IBugManagementService/ClaimBugAlertResolutionResponse")]
        System.Threading.Tasks.Task<string> ClaimBugAlertResolutionAsync(int bugId, int developerId, int assignedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/RetreatBugAlertResolution", ReplyAction="http://tempuri.org/IBugManagementService/RetreatBugAlertResolutionResponse")]
        string RetreatBugAlertResolution(int bugId, int developerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/RetreatBugAlertResolution", ReplyAction="http://tempuri.org/IBugManagementService/RetreatBugAlertResolutionResponse")]
        System.Threading.Tasks.Task<string> RetreatBugAlertResolutionAsync(int bugId, int developerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/ResolveBugAlert", ReplyAction="http://tempuri.org/IBugManagementService/ResolveBugAlertResponse")]
        string ResolveBugAlert(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBugManagementService/ResolveBugAlert", ReplyAction="http://tempuri.org/IBugManagementService/ResolveBugAlertResponse")]
        System.Threading.Tasks.Task<string> ResolveBugAlertAsync(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBugManagementServiceChannel : BugTrackingWebApplication.BugManagementServiceReference.IBugManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BugManagementServiceClient : System.ServiceModel.ClientBase<BugTrackingWebApplication.BugManagementServiceReference.IBugManagementService>, BugTrackingWebApplication.BugManagementServiceReference.IBugManagementService {
        
        public BugManagementServiceClient() {
        }
        
        public BugManagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BugManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BugManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BugManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string AddBugAlertRecord(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert) {
            return base.Channel.AddBugAlertRecord(bugAlert);
        }
        
        public System.Threading.Tasks.Task<string> AddBugAlertRecordAsync(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert) {
            return base.Channel.AddBugAlertRecordAsync(bugAlert);
        }
        
        public System.Data.DataSet GetBugCategories() {
            return base.Channel.GetBugCategories();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBugCategoriesAsync() {
            return base.Channel.GetBugCategoriesAsync();
        }
        
        public BugTrackingWebApplication.BugManagementServiceReference.BugAlert GetBugAlertRecord(int bugId) {
            return base.Channel.GetBugAlertRecord(bugId);
        }
        
        public System.Threading.Tasks.Task<BugTrackingWebApplication.BugManagementServiceReference.BugAlert> GetBugAlertRecordAsync(int bugId) {
            return base.Channel.GetBugAlertRecordAsync(bugId);
        }
        
        public System.Data.DataSet GetAllBugAlertRecords(BugTrackingWebApplication.BugManagementServiceReference.BugAlertFilter filter) {
            return base.Channel.GetAllBugAlertRecords(filter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllBugAlertRecordsAsync(BugTrackingWebApplication.BugManagementServiceReference.BugAlertFilter filter) {
            return base.Channel.GetAllBugAlertRecordsAsync(filter);
        }
        
        public string UpdateBugAlert(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert) {
            return base.Channel.UpdateBugAlert(bugAlert);
        }
        
        public System.Threading.Tasks.Task<string> UpdateBugAlertAsync(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert) {
            return base.Channel.UpdateBugAlertAsync(bugAlert);
        }
        
        public string DeleteBugAlertRecord(int bugAlertId) {
            return base.Channel.DeleteBugAlertRecord(bugAlertId);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBugAlertRecordAsync(int bugAlertId) {
            return base.Channel.DeleteBugAlertRecordAsync(bugAlertId);
        }
        
        public string ClaimBugAlertResolution(int bugId, int developerId, int assignedBy) {
            return base.Channel.ClaimBugAlertResolution(bugId, developerId, assignedBy);
        }
        
        public System.Threading.Tasks.Task<string> ClaimBugAlertResolutionAsync(int bugId, int developerId, int assignedBy) {
            return base.Channel.ClaimBugAlertResolutionAsync(bugId, developerId, assignedBy);
        }
        
        public string RetreatBugAlertResolution(int bugId, int developerId) {
            return base.Channel.RetreatBugAlertResolution(bugId, developerId);
        }
        
        public System.Threading.Tasks.Task<string> RetreatBugAlertResolutionAsync(int bugId, int developerId) {
            return base.Channel.RetreatBugAlertResolutionAsync(bugId, developerId);
        }
        
        public string ResolveBugAlert(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert) {
            return base.Channel.ResolveBugAlert(bugAlert);
        }
        
        public System.Threading.Tasks.Task<string> ResolveBugAlertAsync(BugTrackingWebApplication.BugManagementServiceReference.BugAlert bugAlert) {
            return base.Channel.ResolveBugAlertAsync(bugAlert);
        }
    }
}
